#!/usr/bin/env python
import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
def demo_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), KeyboardButton("üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π"))
    keyboard.add(KeyboardButton("–ü–æ–º–æ—â—å"), KeyboardButton("–û –±–æ—Ç–µ"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    try:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TalkeryBot - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤! üéì\n\n"
            "–Ø —Ä–∞–±–æ—Ç–∞—é –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
            reply_markup=demo_keyboard()
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.id}")

@router.message(Command("about"))
async def cmd_about(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about"""
    await message.answer(
        "–û –±–æ—Ç–µ TalkeryBot:\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0.0\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å: @dvrudz\n\n"
        "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def echo_message(message: types.Message):
    """–≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if message.text == "–ü–æ–º–æ—â—å":
            await cmd_help(message)
        elif message.text == "–û –±–æ—Ç–µ":
            await cmd_about(message)
        elif message.text in ["üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π"]:
            language = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" if message.text == "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π" else "–Ω–µ–º–µ—Ü–∫–∏–π"
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {language} —è–∑—ã–∫.\n"
                f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {language}")
        else:
            await message.answer(
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                reply_markup=demo_keyboard()
            )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
async def delete_webhook():
    """–£–¥–∞–ª—è–µ—Ç webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        bot_temp = Bot(token=BOT_TOKEN)
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
        await bot_temp.delete_webhook(drop_pending_updates=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        info = await bot_temp.get_webhook_info()
        logger.info(f"Webhook —É–¥–∞–ª–µ–Ω: {info.url is None}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await bot_temp.session.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è webhook
        logger.info("–û–∂–∏–¥–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è webhook")
        await asyncio.sleep(3)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await delete_webhook()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
    import threading
    from http.server import HTTPServer, BaseHTTPRequestHandler
    
    class SimpleHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'Bot is running!')
        
        def log_message(self, format, *args):
            return  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_server():
        port = int(os.environ.get("PORT", 10000))
        server = HTTPServer(('0.0.0.0', port), SimpleHandler)
        logger.info(f"–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        server.serve_forever()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())
